/**
 * Script pour effacer toutes les donn√©es de test de la base de donn√©es T-Cardio AI
 * Utiliser avec pr√©caution - Cette op√©ration est irr√©versible
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// Chemin vers le fichier de base de donn√©es
const dbPath = path.resolve(__dirname, '../db/tcardio.sqlite');

console.log('üîÑ D√©marrage du nettoyage de toutes les donn√©es de test...');

// V√©rifier si la base de donn√©es existe
if (!fs.existsSync(dbPath)) {
  console.log('‚ÑπÔ∏è Aucune base de donn√©es trouv√©e √† l\'emplacement sp√©cifi√©.');
  process.exit(0);
}

// Ouvrir la base de donn√©es
const db = new sqlite3.Database(dbPath, sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', err.message);
    process.exit(1);
  }
  console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
});

// Supprimer les donn√©es de toutes les tables
const tables = ['shares', 'reports', 'measurements', 'users'];

// Utiliser une transaction pour garantir l'int√©grit√© des donn√©es
db.serialize(() => {
  db.run('BEGIN TRANSACTION');
  
  let hasErrors = false;
  
  tables.forEach(table => {
    db.run(`DELETE FROM ${table}`, [], function(err) {
      if (err) {
        console.error(`‚ùå Erreur lors de la suppression des donn√©es de ${table}:`, err.message);
        hasErrors = true;
      } else {
        console.log(`‚úÖ Toutes les donn√©es de la table ${table} ont √©t√© supprim√©es. Lignes affect√©es: ${this.changes}`);
      }
    });
  });
  
  // R√©initialiser les s√©quences d'identifiants (SQLite utilise g√©n√©ralement rowid)
  tables.forEach(table => {
    db.run(`DELETE FROM sqlite_sequence WHERE name='${table}'`, [], function(err) {
      if (err) {
        console.error(`‚ùå Erreur lors de la r√©initialisation de la s√©quence pour ${table}:`, err.message);
        hasErrors = true;
      }
    });
  });
  
  if (hasErrors) {
    db.run('ROLLBACK', [], () => {
      console.error('‚ùå Nettoyage annul√© en raison d\'erreurs.');
      db.close();
      process.exit(1);
    });
  } else {
    db.run('COMMIT', [], () => {
      console.log('‚úÖ Nettoyage des donn√©es termin√© avec succ√®s.');
      db.close(() => {
        console.log('‚úÖ Connexion √† la base de donn√©es ferm√©e.');
      });
    });
  }
});
